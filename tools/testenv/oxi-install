#!/bin/bash
## <info> Copy code from host, compile, install OpenXPKI + dependencies
test $(whoami) != "root" && echo "Please run this as root: sudo $0" && exit 1
set -o pipefail

if [[
    -z $OXI_SOURCE_DIR ||
    -z $OXI_CORE_DIR
]]; then
    cat <<EOF
This script needs the following environment variables set:
    OXI_SOURCE_DIR              # source: public code, e.g. /code-repo
    OXI_EE_SOURCE_DIR           # source: EE code (optional)
    OXI_TEST_SAMPLECONFIG_DIR   # source: config, e.g. /code-repo/config (optional)
    OXI_CORE_DIR                # target: where "core" gets copied to and tests are run, e.g. /opt/openxpki/core
EOF
    exit 1
fi

#
# Exit handler
#
LOG=$(mktemp)
function _exit () {
    if [ $1 -ne 0 -a $1 -ne 333 ]; then
        echo "================================================================================"
        echo "$0: ERROR - last command exited with code $1, output:"
        echo "================================================================================"
        cat $LOG
        echo "================================================================================"
        echo "$0: end of last command log"
        echo "================================================================================"
    fi
    rm -f $LOG
    exit $1
}

[[ "${@#--help}" != "$@" ]] && cat <<__HELP && exit 1
SYNOPSIS
    $(basename "$0") [OPTIONS] [COMMAND]

DESCRIPTION
    $(cat "$0" | grep "[[:blank:]]#*[[:blank:]]*<info>" | cut -d ">" -f2 | sed s/'^[[:blank:]]*'//).
    If COMMAND is given then it is executed afterwards.

OPTIONS
    --no-i18n
        Skip updating internationalization files.

    --no-compile
        Skip compiling XS code parts.

    --fast
        Shortcut for "--no-i18n --no-compile".
__HELP

trap '_exit $?' EXIT
set -e

#
# Command line options
#
PARAMS=""
IS_I18N=1
IS_COMPILE=1
COPY_EE_CODE=1
while (( "$#" )); do
    case "$1" in
        --no-i18n)
            IS_I18N=0
            shift
        ;;
        --no-compile)
            IS_COMPILE=0
            shift
            ;;
        --no-ee)
            COPY_EE_CODE=0
            shift
            ;;
        --fast)
            IS_I18N=0
            IS_COMPILE=0
            shift
            ;;
        -*|--*=) # unsupported flags
            echo "Error: Unsupported flag $1" >&2
            exit 0
            ;;
        *) # preserve all remaining arguments as positional arguments
            PARAMS="$@"
            break
            ;;
    esac
done
# set positional arguments in their proper place
eval set -- "$PARAMS"

FOLLOWUP_COMMAND="$@"

echo "[$([ "$IS_COMPILE" -eq 1 ] && echo "X" || echo " ")] Compile OpenXPKI"
echo "[$([ "$IS_I18N" -eq 1 ] && echo "X" || echo " ")] Compile i18n"
test -n "$FOLLOWUP_COMMAND" && echo "[X] Execute: $FOLLOWUP_COMMAND"
echo

#
# Grab and install Perl module dependencies from Makefile.PL using PPI
#

# Fix problems with old IO::Socket::SSL (logical NOT needed because in Bash 0 = true).
# If the module is not installed at all the condition will be false and it will
# be installed later on as a dependency.
if perl -e 'use version; use IO::Socket::SSL; exit !(version->parse($IO::Socket::SSL::VERSION) < version->parse("2.074"))' 2>/dev/null; then
    echo "Update potentially buggy IO::Socket::SSL"
    cpanm --notest IO::Socket::SSL >$LOG 2>&1
fi

echo "Check and install Perl module dependencies (cpanfile)"
# Install PPI (the check avoids unneccessary requests to CPAN)
if ! perl -e 'use PPI;' >/dev/null 2>&1; then
    cpanm --notest PPI >$LOG 2>&1
fi
# Generate cpanfile from Makefile.PL
$OXI_SOURCE_DIR/tools/scripts/makefile2cpanfile.pl > /cpanfile
# Use CPAN module cache if available
local_cpan=(); if [ -d "$OXI_CPAN_CACHE" ]; then
    echo "=> Using local CPAN cache in $OXI_CPAN_CACHE"
    local_cpan=(--from "$OXI_CPAN_CACHE")
fi
# Install modules
cpanm "${local_cpan[@]}" --quiet --notest --installdeps /

# Install DB modules in Docker environment
if [ -n "$DATABASE" ]; then
    case "$DATABASE" in
        mysql|mariadb)
            echo "Install DBD::MariaDB (environment variable DATABASE=$DATABASE detected)"
            cpanm --quiet --notest --installdeps DBD::MariaDB
            ;;
        postgres)
            echo "Install DBD::Pg (environment variable DATABASE=$DATABASE detected)"
            cpanm --quiet --notest --installdeps DBD::Pg
            ;;
        *)
            echo "ENV variable DATABASE has unknown value: '$DATABASE' - cannot install appropriate DBD::* module."
            ;;
    esac
fi

rsync_exclude=(--exclude=.git/ --exclude=node_modules/ --exclude=verdaccio-npm-cache/)

#
# Compile OpenXPKI
#
echo -e "\nCompilation and installation"
echo "- copy source code from host to $OXI_CORE_DIR"
rsync -a --delete "${rsync_exclude[@]}" $OXI_SOURCE_DIR/core/ $OXI_CORE_DIR     >$LOG 2>&1

# Copy EE Perl modules
if [[ $COPY_EE_CODE -eq 1 && -d $OXI_EE_SOURCE_DIR/opt/myperl/site_perl/OpenXPKI ]]; then
    echo "  --> incl. EE code"
    rsync -a $OXI_EE_SOURCE_DIR/opt/myperl/site_perl/ $OXI_CORE_DIR/server/     >$LOG 2>&1
fi

# Set version so Makefile.PL does not need "vergen" (which we will not copy to $OXI_CORE_DIR)
OXI_VERSION=$(cat $OXI_SOURCE_DIR/.VERSION_MAJOR <(echo .) $OXI_SOURCE_DIR/.VERSION_MINOR <(echo .) $OXI_SOURCE_DIR/.VERSION_RELEASE | tr -d "\n" )
cat <<__VERSION > $OXI_CORE_DIR/server/OpenXPKI/VERSION.pm
package OpenXPKI::VERSION;
our \$VERSION = '$OXI_VERSION';
1;
__VERSION
echo "- OpenXPKI version: $OXI_VERSION"

# Copy web UI files
echo "- copy UI code"
rsync -a --delete "${rsync_exclude[@]}" $OXI_SOURCE_DIR/core/server/htdocs/ /var/www/openxpki/ >$LOG 2>&1
rsync -a --delete "${rsync_exclude[@]}" $OXI_SOURCE_DIR/core/server/cgi-bin/ /usr/lib/cgi-bin/ >$LOG 2>&1

# Copy EE web UI files + update EE systemd units
if [ $COPY_EE_CODE -eq 1 ]; then
    if [ -d $OXI_EE_SOURCE_DIR/opt/myperl/share/cgi-bin ]; then
        echo -e "  --> incl. EE code"
        rsync -a $OXI_EE_SOURCE_DIR/opt/myperl/share/cgi-bin/ /usr/lib/cgi-bin/ >$LOG 2>&1
    fi

    # Copy EE /usr files (must be done after copying files with "rsync -a --delete ... /usr/lib/cgi-bin")
    # INCLUDES systemd units!
    if [ -d $OXI_EE_SOURCE_DIR/usr ]; then
        echo -e "- copy EE /usr files"
        rsync -a $OXI_EE_SOURCE_DIR/usr/ /usr/ >$LOG 2>&1
    fi
fi

# Overwrite EE systemd units with Debian units
echo -e "- copy Debian systemd units"
cp $OXI_SOURCE_DIR/package/debian/core/libopenxpki-perl.openxpkid.service /usr/lib/systemd/system/openxpkid.service >$LOG 2>&1
cp $OXI_SOURCE_DIR/package/debian/core/libopenxpki-perl.openxpki-clientd.service /usr/lib/systemd/system/openxpki-clientd.service >$LOG 2>&1

# finish systemd unit setup after EE code was copied
echo "- replacements in systemd units: apache -> www-data; /usr/bin -> /usr/local/bin"
find /usr/lib/systemd/system/ -name 'openxpki*' | \
    xargs perl -pe 's{^(User|Group)=openxpki$}{$1=root}g; s{(User|Group)=apache}{$1=www-data}g; s{/usr/bin/openxpkictl}{/usr/local/bin/openxpkictl}g;' -i >$LOG 2>&1

echo "- reload systemd"
systemctl daemon-reload

# Copy EE scripts
if [[ $COPY_EE_CODE -eq 1 && -d $OXI_EE_SOURCE_DIR/opt/myperl/bin ]]; then
    echo "- copy EE scripts and add them to Makefile.PL:"
    rsync -a $OXI_EE_SOURCE_DIR/opt/myperl/bin/ $OXI_CORE_DIR/server/bin/ >$LOG 2>&1

    # inject EE scripts into Makefile.PL's EXE_FILES array
    files=$(find $OXI_EE_SOURCE_DIR/opt/myperl/bin/ -type f -printf "bin/%f ")
    echo "$files" | sed 's/ /\n/g; s/^/    /mg'
    echo "$files" | $OXI_SOURCE_DIR/tools/scripts/add-exe-to-makefile.pl $OXI_CORE_DIR/server/Makefile.PL \
      > $OXI_CORE_DIR/server/Makefile.PL.new \
      && mv $OXI_CORE_DIR/server/Makefile.PL.new $OXI_CORE_DIR/server/Makefile.PL
fi

test -e /var/www/openxpki/index.html || ln -s default.html /var/www/openxpki/index.html

# Community config: copy home.html
if [[ -n "$OXI_TEST_SAMPLECONFIG_DIR" && -e $OXI_TEST_SAMPLECONFIG_DIR/contrib/home.html ]]; then
    echo -e "- copy static home.html"
    mkdir -p /var/www/static/_global
    cp $OXI_TEST_SAMPLECONFIG_DIR/contrib/home.html /var/www/static/_global/home.html
fi

echo "- purge installed code"
perl -e 'use v5.10; say for grep { -d && /^[^\.]/ } @INC' |\
    xargs -I '{}' find '{}' -name 'OpenXPKI*' |\
    sort |\
    uniq |\
    while read path; do
        test -w "$path" && echo "    $path" && rm -rf "$path" || true
    done

pushd $OXI_CORE_DIR/server                                              >$LOG 2>&1
perl Makefile.PL                                                        >$LOG 2>&1
if [[ $IS_COMPILE -eq 1 ]]; then
    echo "- compile OpenXPKI $OXI_VERSION"
    make                                                                >$LOG 2>&1
fi
echo "- install OpenXPKI"
make install                                                            >$LOG 2>&1

export perldir=$(grep ^INSTALLBIN Makefile | tr -d " " | cut -d= -f2)
test -x $perldir/perl || (echo "INSTALLBIN/perl does not exist (INSTALLBIN = $perldir, read from Makefile)" >$LOG; exit 1)
echo "- replace shebang in Perl scripts with #!$perldir/perl"
( \
    find $OXI_CORE_DIR/server/bin/ -type f -printf "$perldir/%f\n"; \
    find /usr/lib/cgi-bin -name '*.fcgi' \
) | \
    xargs perl -pe '$p=$ENV{perldir}; s{^#\!\S*perl\S*}{#!$p/perl}' -i  >$LOG 2>&1

popd                                                                    >$LOG 2>&1

libdir=$(perl -e 'use v5.10; use List::Util qw(first); say first { -e "$_/OpenXPKI.pm" } @INC')
echo "- install CGI::Session::Driver::openxpki"
echo "    $libdir"
mkdir -p $libdir/CGI/Session/Driver
cp $OXI_CORE_DIR/server/CGI_Session_Driver/openxpki.pm $libdir/CGI/Session/Driver/

if [[ $IS_I18N -eq 1 ]]; then
    echo "- compile and install I18N files"
    echo "$OXI_VERSION" > $OXI_CORE_DIR/i18n/VERSION
    pushd $OXI_CORE_DIR/i18n                                            >$LOG 2>&1
    make                                                                >$LOG 2>&1
    make install                                                        >$LOG 2>&1
    popd                                                                >$LOG 2>&1

    # Debian only...
    if command -v locale-gen >/dev/null; then
        echo "- regenerate locales"
        TEMP_MAKEFILE=$(mktemp)
        cat $OXI_CORE_DIR/i18n/Makefile <(echo -e "print-langs:\n\techo \$(LANGS)") > $TEMP_MAKEFILE
        for lang in $(IFS=' '; make -s -f $TEMP_MAKEFILE print-langs); do
            if ! grep -q ^$lang /etc/locale.gen; then
                echo "    adding $lang to /etc/locale.gen"
                echo "$lang.UTF-8 UTF-8" >> /etc/locale.gen
            fi
        done

        locale-gen                                                        >$LOG 2>&1
    fi
fi

if [ -n "$FOLLOWUP_COMMAND" ]; then
    echo "- execute $FOLLOWUP_COMMAND"
    eval $FOLLOWUP_COMMAND
fi
