#!/usr/bin/perl -w

use strict;
use warnings;
use English;
use OpenXPKI::Debug;
use OpenXPKI::Control;
use Getopt::Long;
use Pod::Usage;
use POSIX ":sys_wait_h";
use Errno;
use File::Spec;
use Proc::ProcessTable;

use OpenXPKI::VERSION;


my $MAX_ATTEMPTS = 300;
our $VERSION ;

$| = 1;


my %params;
GetOptions(\%params,
       qw(
          help|?
          man
          cfg|cfgfile|conf|config=s
          instance|i=s
          version
          debug=s@
          quiet
          fg|foreground
          )) or pod2usage(-verbose => 0);

if ($params{version}) {
    print "OpenXPKI Version: $OpenXPKI::VERSION::VERSION\n";
    exit 0;
}

pod2usage(-exitstatus => 0, -verbose => 2) if $params{man};
pod2usage(-verbose => 1) if ($params{help});
if (scalar @ARGV != 1) {
    print STDERR "Usage: openxpkictl [OPTIONS] start|stop|restart|reload|status\n";
    exit 0;
}

# The arguments array for all calls
my $args;

if ($params{quiet}) {
    $args->{SILENT} = 1;
} else {
    $args->{SILENT} = 0;
}

if (defined $params{cfg}) {
    $args->{CONFIG} = File::Spec->rel2abs($params{cfg});
} elsif (defined $params{instance}) {
    $args->{CONFIG} = sprintf '/etc/openxpki/%s/config.d/', $params{instance};
}

my $cmd = shift;

if ($cmd eq 'status') {

    if (OpenXPKI::Control::status( $args )) {
        exit 3;
    }
    exit 0;

} elsif ($cmd eq 'start' || $cmd eq 'restart') {

    if ($cmd eq 'restart') {
        $args->{RESTART} = 1;
    }

    if (defined $params{fg}) {
        $args->{FOREGROUND} = 1;
    }

    if (defined $params{debug}) {

        @{$params{debug}} = split(m{,}, join(',', @{$params{debug}}));

        $args->{DEBUG} = {};
        foreach my $param (@{$params{debug}}) {
            my ($module, $level) = ($param =~ m{ \A (.*?):?(\d*) \z }xms);
            if ($level eq '') {
                $level = 1;
            }
            if ($module eq '') {
                $args->{DEBUG} = $level;
            } else {
                $args->{DEBUG}->{$module} = $level;
            }
        }
    }

    exit OpenXPKI::Control::start( $args );

} elsif ($cmd eq 'stop') {

    exit OpenXPKI::Control::stop( $args );

} elsif ($cmd eq 'reload') {

    exit OpenXPKI::Control::reload( $args );

}

###########################################################################

print STDERR "Unknown command: $cmd.\n";
exit 1;

__END__

=head1 NAME

openxpkictl - start/stop script for OpenXPKI server

=head1 USAGE

openxpkictl [options] COMMAND

 Options:
   --help                brief help message
   --man                 full documentation
   --config PATH         use configuration from path (base of yaml tree)
   --instance|i NAME     Shortcut to set the config path to
                         /etc/openxpki/<instance>/config.d
   --debug  MODULE:LEVEL set MODULE debug level to LEVEL
                         (positive integer value).
                         MODULE defaults to '.*'
                         LEVEL defaults to 1
   --foreground          Uses a non-forking server. This is only
                         useful for debugging or profiling.

 Commands:
   start            Start OpenXPKI daemon
   stop             Stop OpenXPKI daemon
   reload           Reload the configuration
   restart          Restart OpenXPKI daemon
   status           Get OpenXPKI daemon status
   version          Print the OpenXPKI version info


=head1 ARGUMENTS

Available commands:

=over 8

=item B<start>

Starts the OpenXPKI daemon.

=item B<stop>

Stops the OpenXPKI daemon.

=item B<reload>

Reloads the OpenXPKI daemon, re-reading the config repository.
Note: Some changes need a restart, see the documentation!

=item B<restart>

Restarts the OpenXPKI daemon.

=item B<status>

Checks the OpenXPKI daemon status.

=back

=head1 OPTIONS

=over 8

=item B<--help>

Print a brief help message and exits.

=item B<--man>

Prints the manual page and exits.

=item B<--config PATH>

Use PATH to point to the configuration repository.
Defaults to /etc/openxpki/config.d

=item B<--instance NAME>

Shortcut to set the config path when running multiple instances
using the proposed config path layout.

=item B<--version>

Print program version and exit.

=item B<--debug MODULE:LEVEL>

Set specific module debug level to LEVEL (must be a positive integer). Higher
values mean more debug output. Multiple --debug options can be specified.
It is also possible to specify multiple debug settings in one --debug
option by separating them with a comma.
MODULE must be a module specification (e. g. OpenXPKI::Server) and may
contain Perl Regular expressions.

MODULE defaults to '.*' if not specified. LEVEL defaults to 1 if not specified.

Examples:

  --debug
 (equivalent to --debug .*:1)

  --debug OpenPKI::Server
  (equivalent to --debug OpenXPKI::Server:1)

  --debug OpenPKI::Server:100
  (equivalent to --debug OpenXPKI::Server:100)

  --debug OpenPKI::Server:10 --debug OpenXPKI::Crypto::.*:20
  --debug OpenXPKI::Server:10,OpenXPKI::Crypto::.*:20
  (these two are equivalent)

=item B<--foreground>

Does not fork program away and uses a non-forking server. Pretty much
useful only for debugging and profiling.

=back

=head1 DESCRIPTION

B<openxpkictl> is the start script for the OpenXPKI server process.

=over 8

The openxpkictl script returns a 0 exit value on success, and >0 if  an
error occurs.

=back

