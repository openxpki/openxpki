#!/usr/bin/perl -w
#
# Written by Martin Bartosch
# extended by Oliver Welter
# for the OpenXPKI project 2009 - 2012
# Copyright (c) 2012 by The OpenXPKI Project
#

use strict;
use warnings;
use English;
use POSIX qw( strftime );
use Getopt::Long;
use Pod::Usage;
use Data::Dumper;

use OpenXPKI::Client;
#use OpenXPKI::Serialization::Simple;

my %params = (
    authstack => '_System',
    authuser => undef,
    authpass => undef,
    wfid => undef,
    wfaction => undef,
    param => [],
    nosplit => undef,
    );

sub debug {
    my $arg = shift;
    if ($params{debug}) {
    print $arg . "\n";
    }
}

GetOptions(\%params,
       qw(
            help|?
            man
            socketfile=s
            instance|i=s
            realm=s
            authstack=s
            authuser=s
            authpass=s
            wfid=i
            wfaction=s
            param|set=s@
            nosplit
            debug
         )) or pod2usage(-verbose => 0);

pod2usage(-exitstatus => 0, -verbose => 2) if $params{man};
pod2usage(-verbose => 1) if ($params{help});
if (scalar @ARGV != 1) {
    print STDERR "Usage: openxpkicmd [OPTIONS] WF_TYPE\n";
    exit 0;
}

my $wf_type = shift;

# expect foo=bar or foo:bar in @param, split at assignment and
# build hash
my @wf_parameters;
if ( $params{nosplit} ) {
    @wf_parameters = @{$params{param}};
} else {
    @wf_parameters = split(/,/, join(',', @{$params{param}}));
}
my %wf_parameters;
foreach my $entry (@wf_parameters) {
    my ($key, $value) = ($entry =~ m{ \A (.*?) [=:] (.*) }xms);
    if (! defined $key) {
    $key = $entry;
    }
    $wf_parameters{$key} = $value;
}

if (! defined $wf_type) {
    die "No workflow type specified. Stopped";
}



if($params{instance}){
    $params{socketfile} = sprintf '/var/openxpki/%s/openxpki.socket', $params{instance};
} elsif(!$params{socketfile}){
    $params{socketfile} = '/var/openxpki/openxpki.socket';
    printf("using default socket %s \n", $params{socketfile});
}

debug(sprintf("Socketfile: %s", $params{socketfile}));

my $reply;
my $client = OpenXPKI::Client->new(
    {
    SOCKETFILE => $params{socketfile},
    });


if (! defined $client) {
    die "Could not instantiate OpenXPKI client. Stopped";
}

if (! $client->init_session()) {
    die "Could not initiate OpenXPKI server session. Stopped";
}

my $session_id = $client->get_session_id();
debug("Session id: $session_id");

$reply = $client->send_receive_service_msg('PING');

SERVICE_MESSAGE:
while (1) {
    debug(Dumper $reply);
    my $status = $reply->{SERVICE_MSG};

    if ($status eq 'GET_PKI_REALM') {
    if (! $params{realm}) {
        print "Available PKI realms:\n";
        foreach my $entry (keys %{$reply->{PARAMS}->{PKI_REALMS}}) {
        print "  $entry\n";
        }
        die "No --realm specified. Stopped";
    }
    $reply = $client->send_receive_service_msg('GET_PKI_REALM',
                           {
                               PKI_REALM => $params{realm},
                           });
    next SERVICE_MESSAGE;
    }

    if ($reply->{SERVICE_MSG} eq 'GET_AUTHENTICATION_STACK') {
    if (! $params{authstack}) {
        print "Available authentication stacks:\n";
        foreach my $entry (keys %{$reply->{PARAMS}->{AUTHENTICATION_STACKS}}) {
        print "  $entry\n";
        }
        die "No --authstack specified. Stopped";
    }
    $reply = $client->send_receive_service_msg('GET_AUTHENTICATION_STACK',
                           {
                               AUTHENTICATION_STACK => $params{authstack},
                           });
    next SERVICE_MESSAGE;
    }

    if ($reply->{SERVICE_MSG} eq 'GET_PASSWD_LOGIN') {
    if (! $params{authuser}) {
        die "No --authuser specified. Stopped";
    }
    $reply = $client->send_receive_service_msg('GET_PASSWD_LOGIN',
                           {
                               LOGIN => $params{authuser},
                               PASSWD => $params{authpass},
                           });
    next SERVICE_MESSAGE;
    }

    if ($reply->{SERVICE_MSG} eq 'SERVICE_READY') {
    last SERVICE_MESSAGE;
    }

    print Dumper $reply;
    die "Unhandled service message. Stopped";
}

# logged in, now run required commands

if ($params{wfid}) {

    if ($params{wfaction}) {

        $reply = $client->send_receive_command_msg(
            'execute_workflow_activity',
            {
                ID => $params{wfid},
                WORKFLOW => $wf_type,
                ACTIVITY => $params{wfaction},
                PARAMS => \%wf_parameters,
            }
        );

        if ($reply->{SERVICE_MSG} eq 'COMMAND') {
            printf "New Workflow State: %s\n", $reply->{PARAMS}->{WORKFLOW}->{STATE};
        }
    } else {
        $reply = $client->send_receive_command_msg( 'get_workflow_activities',
            {
                ID => $params{wfid},
                WORKFLOW => $wf_type,
            }
        );
        if ($reply->{SERVICE_MSG} eq 'COMMAND') {
            print "Possible Actions:\n";
            print join "\n", @{$reply->{PARAMS}};
            print "\n";
        }


    }
} else {

    $reply = $client->send_receive_service_msg('COMMAND',
                       {
                           COMMAND => 'create_workflow_instance',
                           PARAMS => {
                           WORKFLOW => $wf_type,
                           PARAMS => \%wf_parameters,
                           }
                       });
    if ($reply->{SERVICE_MSG} eq 'COMMAND') {
        printf "Workflow created (ID: %d), State: %s\n", $reply->{PARAMS}->{WORKFLOW}->{ID}, $reply->{PARAMS}->{WORKFLOW}->{STATE};
    }

}

if ($reply->{SERVICE_MSG} ne 'COMMAND') {
    print "Error:\n";
    print Dumper $reply;
    exit 1;
}


__END__

=head1 NAME

openxpkicmd - command line tool for starting OpenXPKI workflows

=head1 USAGE

openxpkicmd [options] WORKFLOW_TYPE

  Options:
    --help                brief help message
    --man                 full documentation
    --socketfile FILE     OpenXPKI daemon socket file
    --realm REALM         OpenXPKI realm
    --authstack STACK     authentication stack to use (optional)
    --authuser USER       authentication user (optional)
    --authpass PASS       password for authentication user (optional)
    --param KEY=VALUE     pass VALUE to WF parameter KEY (optional)
    --nosplit             Supress splitting of given WF param on comma
    --wfid                Pickup WF with this id at its current state
    --wfaction            Execute action on exisiting workflow
    --debug               enable debug mode

=head1 INVOCATION

This command may be used to create OpenXPKI workflows to automate internal
actions, e. g. issuance of CRLs..

You can use wfid/wfaction to continue stopped or failed workflows. If you pass
only wfid and no action, a list of possible actions is shown.

=head1 EXAMPLES

openxpkicmd --socketfile /var/openxpki/openxpki.socket --realm "Server CA" I18N_OPENXPKI_WF_TYPE_CRL_ISSUANCE

