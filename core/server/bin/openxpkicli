#!/usr/bin/perl -w
#
# Written by Oliver Welter
# for the OpenXPKI project 2013
# Copyright (c) 2013 by The OpenXPKI Project
#

use strict;
use warnings;
use English;
use POSIX qw( strftime );
use Getopt::Long;
use Pod::Usage;
use Data::Dumper;

use OpenXPKI::Client;

my %params = (
    authstack => '_System',
    authuser => undef,
    authpass => undef,
    wfid => undef,
    wfaction => undef,
    param => [],
    arg => [],
    );

sub debug {
    my $arg = shift;
    if ($params{debug}) {
    print $arg . "\n";
    }
}

GetOptions(\%params,
       qw(
            help|?
            man
            socketfile=s
            instance|i=s
            realm=s
            authstack=s
            authuser=s
            authpass=s
            command|cmd|c=s
            param|set=s@
            arg=s@
            debug
         )) or pod2usage(-verbose => 0);

pod2usage(-exitstatus => 0, -verbose => 2) if $params{man};
pod2usage(-verbose => 1) if ($params{help});
if (scalar @ARGV != 1) {
    print STDERR "Usage: openxpkicli [OPTIONS] COMMAND\n";
    exit 0;
}

my $command = shift;

# expect foo=bar or foo:bar in @param, split at assignment and
# build hash
my @parameters = split(/,/, join(',', @{$params{param}}));
my %parameters;
my $params_is_array = 1;
foreach my $entry (@parameters) {
    my ($key, $value) = ($entry =~ m{ \A (.*?) [=:] (.*) }xms);
    if (! defined $key) {
        $key = $value = $entry;
    } else {
         $params_is_array = 0;
    }
    $parameters{$key} = $value;
}

my @args = split(/,/, join(',', @{$params{arg}}));
my %args;
foreach my $entry (@args) {
    my ($key, $value) = ($entry =~ m{ \A (.*?) [=:] (.*) }xms);
    if (defined $key) {
        $args{uc($key)} = $value;
    } else {
        $args{uc($entry)} = 1;
    }

}

if($params{instance}){
    $params{socketfile} = sprintf '/var/openxpki/%s/openxpki.socket', $params{instance};
} elsif(!$params{socketfile}){
    $params{socketfile} = '/var/openxpki/openxpki.socket';
    printf("using default socket %s \n", $params{socketfile});
}

debug(sprintf("Socketfile: %s", $params{socketfile}));

my $reply;
my $client = OpenXPKI::Client->new(
    {
    SOCKETFILE => $params{socketfile},
    });


if (! defined $client) {
    die "Could not instantiate OpenXPKI client. Stopped";
}

if (! $client->init_session()) {
    die "Could not initiate OpenXPKI server session. Stopped";
}

my $session_id = $client->get_session_id();
debug("Session id: $session_id");

$reply = $client->send_receive_service_msg('PING');

SERVICE_MESSAGE:
while (1) {
    debug(Dumper $reply);
    my $status = $reply->{SERVICE_MSG};

    if ($status eq 'GET_PKI_REALM') {
    if (! $params{realm}) {
        print "Available PKI realms:\n";
        foreach my $entry (keys %{$reply->{PARAMS}->{PKI_REALMS}}) {
        print "  $entry\n";
        }
        die "No --realm specified. Stopped";
    }
    $reply = $client->send_receive_service_msg('GET_PKI_REALM',
                           {
                               PKI_REALM => $params{realm},
                           });
    next SERVICE_MESSAGE;
    }

    if ($reply->{SERVICE_MSG} eq 'GET_AUTHENTICATION_STACK') {
    if (! $params{authstack}) {
        print "Available authentication stacks:\n";
        foreach my $entry (keys %{$reply->{PARAMS}->{AUTHENTICATION_STACKS}}) {
        print "  $entry\n";
        }
        die "No --authstack specified. Stopped";
    }
    $reply = $client->send_receive_service_msg('GET_AUTHENTICATION_STACK',
                           {
                               AUTHENTICATION_STACK => $params{authstack},
                           });
    next SERVICE_MESSAGE;
    }

    if ($reply->{SERVICE_MSG} eq 'GET_PASSWD_LOGIN') {
    if (! $params{authuser}) {
        die "No --authuser specified. Stopped";
    }
    $reply = $client->send_receive_service_msg('GET_PASSWD_LOGIN',
                           {
                               LOGIN => $params{authuser},
                               PASSWD => $params{authpass},
                           });
    next SERVICE_MESSAGE;
    }

    if ($reply->{SERVICE_MSG} eq 'SERVICE_READY') {
    last SERVICE_MESSAGE;
    }

    print Dumper $reply;
    die "Unhandled service message. Stopped";
}

# logged in, now run requested command


if (%parameters) {
    if ($params_is_array) {
        my @t = keys(%parameters);
        $args{PARAMS} = \@t;
    } else {
        $args{PARAMS} = \%parameters;
    }
}

$reply = $client->send_receive_service_msg('COMMAND', {
    COMMAND => $command,
    PARAMS => \%args
});

if ($reply->{SERVICE_MSG} eq 'COMMAND') {
    print Dumper $reply->{PARAMS};
    print "done\n";
    exit 0;
} else {
    print "Error:\n";
    print Dumper $reply;
    exit 1;
}


__END__

=head1 NAME

openxpkicli - command line tool for running API requests

=head1 USAGE

openxpkicli [options] command

  Options (all arguments are optional):
    --help                brief help message
    --man                 full documentation
    --socketfile FILE     OpenXPKI daemon socket file
    --instance  NAME      Shortcut to set socket on multi-instance configs
    --realm REALM         OpenXPKI realm
    --authstack STACK     authentication stack to use
    --authuser USER       authentication user
    --authpass PASS       password for authentication user
    --arg KEY=VALUE       pass VALUE to method as parameter KEY
    --param VALUE     	  stack VALUE onto methods PARAMS array
    --param KEY=VALUE     set VALUE in methods PARAMS hash using KEY
    --debug               enable debug mode

=head1 INVOCATION

Invoke the named command through the OpenXPKI API using the given conenction socket.

Anything passed using C<arg> is added to the methods argument list. If the
method has a PARAMS argument which accepts an array or hash, you can use
param to fill this argument. You must not mix value only and key=value param
calls on one command.

=head1 EXAMPLES

openxpkicli --realm "Server CA" --arg message=testmail --param rcpt=pki@mycompany.local send_notification

