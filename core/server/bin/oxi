#!/usr/bin/env perl
use OpenXPKI;

# Core modules
use FindBin qw( $Script );
use Getopt::Long;
use Module::Metadata;
use JSON::PP;

# CPAN modules
use PPI::Document;
use YAML::PP;

# Project modules
use OpenXPKI::i18n qw(set_language);
use OpenXPKI::Client::API;
use OpenXPKI::Client::API::Response;
use OpenXPKI::Client::CLI;
use OpenXPKI::DTO::Authenticator;

=head2 show_help I<command> [I<subcommand>]

Runs C<get_pod_text> on the package name constructed from the given arguments.

If a I<subcommand> is given, evaluates the parameter specification and
renders a description on the parameters.

=cut

signature_for show_help => (
    named => [
        api => 'OpenXPKI::Client::API',
        command => 'Str',
        subcommand => 'Str', { default => '' },
        short => 'Bool', { default => 0 },
    ],
);
sub show_help ($arg) {
    my $api = $arg->api;
    my $cmd = $arg->command;
    my $subcmd = $arg->subcommand // '';
    my $subcmd_var = $arg->subcommand || '[SUBCOMMAND]';

    LOGDIE("Invalid characters in command") unless $cmd =~ m{\A\w*\z};
    LOGDIE("Invalid characters in subcommand") unless $subcmd =~ m{\A\w*\z};

    my $pod;
    $pod.= "=head1 USAGE\n\n%%SCRIPT%% $cmd $subcmd_var [OPTIONS] PARAMETERS\n\n" unless $arg->short;

    #
    # COMMAND help
    #
    # TODO - select right sections and enhance formatting
    unless ($subcmd) {
        $pod.= $api->get_pod($cmd, 'DESCRIPTION') unless $arg->short;

        $pod.= "\n\n=head1 SUBCOMMANDS\n\n=over\n\n";
        my $subcmds = $api->subcommands($cmd);
        for my $subcmd (sort keys $subcmds->%*) {
            $pod.= sprintf "=item %s\n\n%s\n\n", $subcmd, $subcmds->{$subcmd};
        }
        $pod.= "=back\n\n";

        $api->show_pod(-oxi_pod => $pod);
    }

    #
    # SUBCOMMAND help
    #
    $pod.= $api->get_pod("${cmd}::$subcmd", 'DESCRIPTION');

    my $attrs = $api->get_attribute_details($cmd, $subcmd);
    if (scalar keys $attrs->%*) {
        $pod.= "\n\n=head1 PARAMETERS\n\n=over\n\n";
        for my $name (sort keys $attrs->%*) {
            $pod.= sprintf(
                "=item --%s (%s)\n\n%s\n\n",
                $name, $attrs->{$name}->{spec}, $attrs->{$name}->{desc},
            );
        };
        $pod.= "=back\n\n";
    }

    $pod.= $api->get_pod(__FILE__, 'OPTIONS');

    $api->show_pod(-oxi_pod => $pod);
}

sub handle_error ($err, $debug_details = '') {
    # a simple plain error message
    if (not ref $err) {
        ERROR(OpenXPKI::i18n::i18nTokenizer($err));
        exit 10;
    }

    # known special error
    if (blessed $err) {
        if ($err->isa('OpenXPKI::DTO::ValidationException')) {
            ERROR(OpenXPKI::i18n::i18nTokenizer($err->message));
            exit 10;
        }
        if ($err->isa('OpenXPKI::Exception')) {
            ERROR(OpenXPKI::i18n::i18nTokenizer($err->message)) unless $err->__is_logged;
            exit 10;
        }
    }

    # unknown error
    ERROR($debug_details) if $debug_details;
    ERROR(sprintf "Something went wrong (%s)", ref $err);
    exit 255;
}

set_language('en_US');
use Log::Log4perl qw(:easy :no_extra_logdie_message);

my $verbose = 0;
my %opt = ('verbose' => \$verbose);

# pass_through: anything unknown, ambiguous or invalid will be passed through to @ARGV
Getopt::Long::Configure('pass_through','bundling');

GetOptions( \%opt, ('verbose|v+','json','json-pretty','auth-key|k=s','auth-config|c=s','no-caop','help'));

Getopt::Long::Configure('no_pass_through');

my $l4p_level;
my $l4p_layout = '%m%n';
if ($verbose > 2) {
    $l4p_level = $TRACE;
    $l4p_layout = '%l %F:%L %m%n';
} elsif ($verbose == 2) {
    $l4p_level = $DEBUG;
    $l4p_layout = '%m%n';
} elsif ($verbose == 1) {
    $l4p_level = $INFO;
} else {
    $l4p_level = $ERROR;
}
Log::Log4perl->easy_init({ level => $l4p_level, layout => $l4p_layout });

my $api = OpenXPKI::Client::API->new(
    enable_acls => 0,
    script_name => $Script,
);

# Help
$api->show_pod(
    -msg => "Missing command. Use --help for more details.\n",
    -oxi_pod => $api->get_pod(__FILE__),
    -sections => 'COMMANDS',
) unless (@ARGV or $opt{help});

my $command = ($opt{help} ? 'help' : shift) // '';

# help is also avail via flag for subcommands
if ($command eq 'help') {
    if (@ARGV) {
        my $cmd = $ARGV[0];
        my $subcmd = $ARGV[1];
        show_help(
            api => $api,
            command => $cmd,
            defined $subcmd ? (subcommand => $subcmd) : (),
        );
    } else {
        $api->show_pod(-oxi_pod => join('', $api->get_pod_nodes(__FILE__)));
    }
}

my $subcommand = shift;
# List subcommands for command
if (not $subcommand) {
    say "Missing subcommand.\n";
    show_help(
        api => $api,
        command => $command,
        short => 1,
    );
}

# we have command and subcommand so lets handle parameters and dispatch

my @extra_args;
my %params;
# Some commands can consume extra positional args, we strip them now
# afterwards the first argument of ARGV should be something parsed
# by GetOptions which leaves the extra parameters after "--" on ARGV
while (@ARGV && substr($ARGV[0],0,1) ne '-') {
    push @extra_args, shift;
}

# Create GetOption spec from the parameters recorded in the command
try {
    if (my @getopts = $api->getopt_params($command, $subcommand)) {
        TRACE('GetOptions parameters: ' . Dumper \@getopts);
        GetOptions( \%params, @getopts ) || exit 1;
    }
}
catch ($error) {
    handle_error($error);
}

# reserved internal command parameters
$params{positional_args} = \@extra_args if @extra_args;
$params{payload} = \@ARGV if @ARGV;

# TODO - Review if there is a better place for this
my %auth_args;

# For non-global commands the API injects 'realm' into the list of required parameters.
# So if realm is present and set we put it into auth_args
# NB: Realm argument for commands is pki_realm
if ($params{realm}) {
    DEBUG('Set command realm ' . $params{realm});
    $auth_args{'pki_realm'} = $params{realm};
}

# Explicit auth key given
if (my $keyfile = $opt{'auth-key'}) {
    if (!-r $keyfile) {
        LOGDIE('Unable to find/read keyfile at ' . $keyfile);
    }
    $auth_args{account_key} = $keyfile;

# Explicit auth config
} elsif ($opt{'auth-config'}) {


} else {
    my $keyfile = glob("~/.oxi/client.key");
    # first try to autodetect the admin mode key file...
    if ((not $opt{'no-caop'}) && -e $keyfile && -r $keyfile) {
        $auth_args{account_key} = $keyfile;

    # ...and second the user config file.
    } else {

    }
}

INFO('Enable operator mode using keyfile '. $auth_args{account_key})
    if ($auth_args{account_key});

my $client = OpenXPKI::Client::CLI->new(
    authenticator => OpenXPKI::DTO::Authenticator->new(%auth_args)
);
$api->client($client);

# Dispatch request
TRACE "Command parameters: " . Dumper  \%params;
my $res;
try {
    my $payload = $api->dispatch(
        rel_namespace => $command,
        command => $subcommand,
        params => \%params,
    );
    $res = OpenXPKI::Client::API::Response->new(
        payload => $payload,
    );
}
catch ($err) {
    $res = OpenXPKI::Client::API::Response->new(
        payload => $err,
        state => 400,
    );
}
TRACE(Dumper $res);

my $json = JSON::PP->new();

if ($res->state == 200) {
    my $out = $res->payload;
    if (blessed $out) {
        $out = $out->params();
    }
    if (ref $out eq '')  {
        $out = OpenXPKI::i18n::i18nTokenizer($out);
    } else {
        $out = OpenXPKI::i18n::i18n_walk($out);
    }
    if ($opt{'json-pretty'}) {
        print $json->pretty()->encode($out);
    } elsif ($opt{'json'}) {
        print $json->encode($out);
    } else {
        my $ypp = YAML::PP->new;
        print $ypp->dump_string($out);
    }
    exit 0;

} else {
    handle_error($res->payload, sprintf("State: %d", $res->state));
}


=head1 NAME

%%SCRIPT%% - Manage OpenXPKI instances and artefacts

=head1 SYNOPSIS

Manage OpenXPKI instances and artefacts:

    %%SCRIPT%% COMMAND [SUBCOMMAND] [OPTIONS] PARAMETERS

Show detailed help on a command or subcommand:

    %%SCRIPT%% help COMMAND [SUBCOMMAND]
    %%SCRIPT%% COMMAND [SUBCOMMAND] --help

=head1 COMMANDS

%%COMMANDS%%

=head1 OPTIONS

=over

=item --help

Show help on a command or subcommand.

=item --verbose|-v

Raise loglevel to INFO, DEBUG (-vv) or TRACE (-vvv).

=item --json

Print output data as compact JSON structure.

=item --json-pretty

Print output data as formated JSON structure.

=item --auth-config|-c

Path to a config file to read the authentication details from.

=item --auth-key|-k

Path to the login key to run command as CA operator.

Default location: ~/.oxi/client.key

=item --no-caop

Do not authenticate as CA operator and use the default user binding even if a CA
operator key was autodetected.

=back

=cut

1;
